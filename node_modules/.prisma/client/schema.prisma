generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Posts {
  Id            Int      @id(map: "PK_Posts") @default(autoincrement())
  Content       String   @db.VarChar(280)
  LikesCount    Int      @default(0)
  ViewsCount    Int      @default(0)
  CommentsCount Int      @default(0)
  CreatedAt     DateTime @default(now())
  UpdatedAt     DateTime @updatedAt

  UserId Int
  User   AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Posts_AspNetUsers_UserId")
}

model AspNetRoleClaims {
  Id          Int         @id(map: "PK_AspNetRoleClaims") @default(autoincrement())
  RoleId      Int
  ClaimType   String?
  ClaimValue  String?
  AspNetRoles AspNetRoles @relation(fields: [RoleId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetRoleClaims_AspNetRoles_RoleId")

  @@index([RoleId], map: "IX_AspNetRoleClaims_RoleId")
}

model AspNetRoles {
  Id               Int                @id(map: "PK_AspNetRoles") @default(autoincrement())
  Name             String?            @db.VarChar(256)
  NormalizedName   String?            @unique(map: "RoleNameIndex") @db.VarChar(256)
  ConcurrencyStamp String?
  AspNetRoleClaims AspNetRoleClaims[]
  AspNetUserRoles  AspNetUserRoles[]
}

model AspNetUserClaims {
  Id          Int         @id(map: "PK_AspNetUserClaims") @default(autoincrement())
  UserId      Int
  ClaimType   String?
  ClaimValue  String?
  AspNetUsers AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserClaims_AspNetUsers_UserId")

  @@index([UserId], map: "IX_AspNetUserClaims_UserId")
}

model AspNetUserLogins {
  LoginProvider       String
  ProviderKey         String
  ProviderDisplayName String?
  UserId              Int
  AspNetUsers         AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserLogins_AspNetUsers_UserId")

  @@id([LoginProvider, ProviderKey], map: "PK_AspNetUserLogins")
  @@index([UserId], map: "IX_AspNetUserLogins_UserId")
}

model AspNetUserRoles {
  UserId      Int
  RoleId      Int
  AspNetRoles AspNetRoles @relation(fields: [RoleId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserRoles_AspNetRoles_RoleId")
  AspNetUsers AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserRoles_AspNetUsers_UserId")

  @@id([UserId, RoleId], map: "PK_AspNetUserRoles")
  @@index([RoleId], map: "IX_AspNetUserRoles_RoleId")
}

model AspNetUserTokens {
  UserId        Int
  LoginProvider String
  Name          String
  Value         String?
  AspNetUsers   AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserTokens_AspNetUsers_UserId")

  @@id([UserId, LoginProvider, Name], map: "PK_AspNetUserTokens")
}

model AspNetUsers {
  Id                   Int                @id(map: "PK_AspNetUsers") @default(autoincrement())
  UserName             String?            @db.VarChar(256)
  NormalizedUserName   String?            @unique(map: "UserNameIndex") @db.VarChar(256)
  Email                String?            @db.VarChar(256)
  NormalizedEmail      String?            @db.VarChar(256)
  EmailConfirmed       Boolean
  PasswordHash         String?
  SecurityStamp        String?
  ConcurrencyStamp     String?
  PhoneNumber          String?
  PhoneNumberConfirmed Boolean
  TwoFactorEnabled     Boolean
  LockoutEnd           DateTime?          @db.Timestamptz(6)
  LockoutEnabled       Boolean
  AccessFailedCount    Int
  Name                 String             @default("") @db.VarChar(50)
  Nickname             String             @default("") @db.VarChar(15)
  CreatedAt            DateTime           @default(now()) @db.Timestamptz(6)
  AspNetUserClaims     AspNetUserClaims[]
  AspNetUserLogins     AspNetUserLogins[]
  AspNetUserRoles      AspNetUserRoles[]
  AspNetUserTokens     AspNetUserTokens[]

  Posts Posts[]

  @@index([NormalizedEmail], map: "EmailIndex")
}

model EFMigrationsHistory {
  MigrationId    String @id(map: "PK___EFMigrationsHistory") @db.VarChar(150)
  ProductVersion String @db.VarChar(32)

  @@map("__EFMigrationsHistory")
}
